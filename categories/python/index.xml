<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Go Buddy Go</title>
    <link>https://ecnedaced-seirots.github.io/categories/python/</link>
    <description>Recent content in Python on Go Buddy Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 15 May 2024 22:33:31 +0900</lastBuildDate>
    <atom:link href="https://ecnedaced-seirots.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Logs InsightsをCLIまたはPython(boto3)から実行</title>
      <link>https://ecnedaced-seirots.github.io/post/d/aws-logs-insights-boto3/</link>
      <pubDate>Wed, 15 May 2024 22:33:31 +0900</pubDate>
      <guid>https://ecnedaced-seirots.github.io/post/d/aws-logs-insights-boto3/</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;CloudWatch Logs Insightsのクエリを、マネジメントコンソールからではなく、AWS CLI及びPython SDK(boto3)から投げてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonで区切り文字の最後の要素を取得</title>
      <link>https://ecnedaced-seirots.github.io/post/b/python-get-last-string/</link>
      <pubDate>Wed, 16 Feb 2022 13:00:00 +0900</pubDate>
      <guid>https://ecnedaced-seirots.github.io/post/b/python-get-last-string/</guid>
      <description>&lt;p&gt;Pythonで、区切り文字の最後の要素を取得する。「要素」と言ってるのは、一旦リストにする必要があるため。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonの辞書・文字列変換とJSON処理</title>
      <link>https://ecnedaced-seirots.github.io/post/b/python-json-dumps-load/</link>
      <pubDate>Thu, 10 Feb 2022 18:00:00 +0900</pubDate>
      <guid>https://ecnedaced-seirots.github.io/post/b/python-json-dumps-load/</guid>
      <description>&lt;p&gt;Pythonの辞書・文字列変換と、JSON処理。必須項目でしょっちゅう使うくせに覚えられない&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonライブラリのローカルインストール方法</title>
      <link>https://ecnedaced-seirots.github.io/post/a/python-package-localinstall/</link>
      <pubDate>Thu, 30 Dec 2021 17:00:00 +0900</pubDate>
      <guid>https://ecnedaced-seirots.github.io/post/a/python-package-localinstall/</guid>
      <description>&lt;p&gt;Pythonライブラリをローカルインストールする必要に迫られて対応した記録。実行した環境はWindowsだが、Linuxでも同様らしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terraformのtfvarsファイルを自動生成する</title>
      <link>https://ecnedaced-seirots.github.io/post/a/terraform_auto_create_tfvars/</link>
      <pubDate>Sun, 28 Nov 2021 17:00:00 +0900</pubDate>
      <guid>https://ecnedaced-seirots.github.io/post/a/terraform_auto_create_tfvars/</guid>
      <description>過去記事からの派生案件で、Terraformで使うtfvarsファイルについて、繰り返しデータを多数投入する想定のため、これを自動生成したいと考えた。
Terraform loop処理の超シンプルな例 Python - Jinja2テンプレートで連続データを処理したい
実際に使用するファイル群は過去記事に記載しているがこんな想定で。（もちろん実際は他にもいろいろ必要）自動生成したいのは、以下の*印をつけたcodecommit.auto.tfvarsである。（この時点では手動で値を記述したもの）
work_dir/ ├── codecommit.auto.tfvars * ├── codecommit.tf ├── config.tf ├── terraform.tfvars ├── variables.tf └── vpc.tf これとは別に、tfvars自動生成作業用ディレクトリの作業前はこの状態。以下3つのファイルを用意する。codecommit.tmplはテンプレートとなる。このファイル名はスクリプトから呼び出すので名称に注意。対象のAWSリソースによって変えるが、tfファイルの名称に合わせておけばよい。
script_dir/ ├── codecommit.tmpl ├── create_vars.py └── data.csv codecommit.tmpl
param{{ num }} = { repository_name = &amp;#34;{{ repo_name }}&amp;#34; description = &amp;#34;{{ des }}&amp;#34; } data.csv （今回の例ではヘッダーありの前提）
num,repo_name,des 1,&amp;#34;my-repo001&amp;#34;,&amp;#34;my-repo001の説明&amp;#34; 2,&amp;#34;my-repo002&amp;#34;,&amp;#34;my-repo002の説明&amp;#34; 3,&amp;#34;my-repo003&amp;#34;,&amp;#34;my-repo003の説明&amp;#34; create_vars.py
import sys import pandas as pd from jinja2 import Environment, FileSystemLoader def main(): # テンプレート読み込み env = Environment(loader=FileSystemLoader(&amp;#39;.</description>
    </item>
    <item>
      <title>Python - Jinja2テンプレートで連続データを処理したい</title>
      <link>https://ecnedaced-seirots.github.io/post/a/jinja2-python/</link>
      <pubDate>Wed, 24 Nov 2021 00:10:00 +0900</pubDate>
      <guid>https://ecnedaced-seirots.github.io/post/a/jinja2-python/</guid>
      <description>Jinja2テンプレートで連続データを処理したい。元データはCSVとかで。いや、Jinja2でなくてもいいかもしれないけど、ちょっと思いつかないな&amp;hellip;
とりあえず参考リンク。最初のリンクは、CSVをJSONに変換しているんだよな、CSVのままでやりたいんだけど。しかし例は分かりやすい。
【jinja2】テンプレートエンジンでデータの連続差し込み PythonのテンプレートエンジンJinja2を使ってみた </description>
    </item>
  </channel>
</rss>
